<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>github和hexo的简单指令</title>
      <link href="/2024/04/13/github-he-hexo-de-shi-yong/"/>
      <url>/2024/04/13/github-he-hexo-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="GitHub和hexo的使用"><a href="#GitHub和hexo的使用" class="headerlink" title="GitHub和hexo的使用"></a>GitHub和hexo的使用</h1><ol><li>找到所需的文件夹（项目文件）</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /d E:\文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><ol><li>git add .       暂存所有更改</li><li>git commit      提交       git commit -m “详细信息”</li><li>git push     将本地的更改同步到“远方”</li><li>git log    来看提交更改的记录</li><li>git checkout  0de3bb6引入原先版本</li><li>标签功能git tag v 0.1.0 0de3bb6（这一串为commit id的前七位）<br>（在使用了标签之后，git checkout v0.1.0和git checkout 0de3bb6同意义）</li><li>git checkout main返回主函数</li></ol><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.用于检验当前是否正常连接，成功后再上交代码</p><ol start="2"><li>hexo g  # 生成博客网页文件</li><li>hexo s  # 本地预览博客</li><li>hexo d  # 上传网页文件到github</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针</title>
      <link href="/2024/04/12/zhi-zhen/"/>
      <url>/2024/04/12/zhi-zhen/</url>
      
        <content type="html"><![CDATA[<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><h2 id="指针类型的运算"><a href="#指针类型的运算" class="headerlink" title="指针类型的运算"></a><strong>指针类型的运算</strong></h2><h3 id="取内容运算"><a href="#取内容运算" class="headerlink" title="取内容运算"></a>取内容运算</h3><ul><li>运算表达式：<strong><code>&lt;指针变量名&gt;</code></strong><ul><li>作用于一个指针类型的变量。</li><li>访问该指针所指向的内存数据。</li><li>即获取指针指向的内存中的值。</li></ul></li></ul><h3 id="取地址运算"><a href="#取地址运算" class="headerlink" title="取地址运算"></a>取地址运算</h3><ul><li>运算表达式：<strong><code>&amp;&lt;可寻址数据名&gt;</code></strong><ul><li>可寻址数据包括：变量、数组元素、类对象等。</li><li>作用于内存中一个可寻址的数据。</li><li>操作的结果是获得该数据的地址。</li></ul></li></ul><h2 id="指针与数组关联"><a href="#指针与数组关联" class="headerlink" title="指针与数组关联"></a><strong>指针与数组关联</strong></h2><ol><li><p><strong>数组名与首元素地址关系：</strong></p><p> 对于数组名 <strong><code>arr</code></strong>，可以将其理解为是一个常量指针，它代表的是首元素的地址，即 <strong><code>&amp;(arr[0])</code></strong> 而对于&amp;arr理解为是一整个数组的地址，它的“进阶”单位(&amp;arr+1)         是数组原理的地址加整个数组的字节长度</p></li><li><p><strong>解引用和取地址符一起作用：</strong></p><p> 解引用和取地址符号一起作用时，相当于直接取消。这意味着通过指针进行解引用和取地址操作可以在数组上进行方便的操作。</p></li></ol><h2 id="指针输出规定："><a href="#指针输出规定：" class="headerlink" title="指针输出规定："></a><strong>指针输出规定：</strong></h2><ol><li><p><strong>作用在最后一维上的理解：</strong></p><p> 对于多维数组，可以将指针视为作用在最后一维上，一定要常用&amp;来代表地址</p><pre class="line-numbers language-cpp"><code class="language-cpp"> <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 一个3行10列的二维数组</span> <span class="token comment" spellcheck="true">// 对地址进行操作，相当于&amp;arr[2][9]</span> <span class="token keyword">int</span> <span class="token operator">*</span>newPtr <span class="token operator">=</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>      在 C++ 中，当使用 **`cout`** 输出指针时，输出行为取决于**指针**的类型。如果是字符指针，输出将会一直输出直到遇到 null 字符为止的字符串。如果是其他类型的指针，输出将会是指针的地址。</code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"> <span class="token function">return_type</span> <span class="token punctuation">(</span><span class="token operator">*</span>pointer_name<span class="token punctuation">)</span><span class="token punctuation">(</span>parameter_types<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong><code>return_type</code></strong>：函数的返回类型。</li><li><strong><code>pointer_name</code></strong>：函数指针的名称。</li><li><strong><code>parameter_types</code></strong>：函数的参数类型。</li></ul></li></ol><h2 id="函数指针的基本形式："><a href="#函数指针的基本形式：" class="headerlink" title="函数指针的基本形式："></a><strong>函数指针的基本形式：</strong></h2><h3 id="函数指针的使用："><a href="#函数指针的使用：" class="headerlink" title="函数指针的使用："></a><strong>函数指针的使用：</strong></h3><pre><code>      函数指针是指向函数的指针类型的变量，可以存储函数的内存地址。通过函数指针，我们可以直接调用对应的函数。      函数名本身就是指向函数代码的指针。当我们使用函数名来调用函数时，编译器会将其解析为函数的入口地址，并跳转到相应的函数代码执行。这种隐式的函数指针概念使得函数调用成为可能。       此外，我们还可以显式地声明函数指针变量，并将函数的地址赋给该指针变量。       函数指针有两个用途：调用函数和做函数的参数。</code></pre><ol><li><p><strong>声明函数指针：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>addFunction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 这表示 <strong><code>addFunction</code></strong> 是一个指向返回类型为 <strong><code>int</code></strong>，接受两个 <strong><code>int</code></strong> 类型参数的函数的指针。</p></li><li><p><strong>指向函数的赋值：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"> addFunction <span class="token operator">=</span> <span class="token operator">&amp;</span>add<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 其中 add 是一个函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong><code>addFunction</code></strong> 现在指向了函数 <strong><code>add</code></strong>。</p><ol><li><p><strong>通过函数指针调用函数：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"> <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 通过 <strong><code>addFunction</code></strong> 调用了函数 <strong><code>add(3, 4)</code></strong>。</p></li></ol><p><strong>示例（调用函数）：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token comment" spellcheck="true">// 函数原型</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 声明并初始化函数指针</span>    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>operation<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>add<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用函数指针调用 add 函数</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Result: "</span> <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重新指向 subtract 函数</span>    operation <span class="token operator">=</span> <span class="token operator">&amp;</span>subtract<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用函数指针调用 subtract 函数</span>    result <span class="token operator">=</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Result: "</span> <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例（调用函数）：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token comment" spellcheck="true">// 函数原型：接受两个整数并返回它们的和</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 函数原型：接受两个整数并返回它们的差</span><span class="token keyword">int</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 函数接受两个整数和一个函数指针作为参数，用于执行特定的操作</span><span class="token keyword">int</span> <span class="token function">operate</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>operation<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">operation</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用函数指针作为参数调用 operate 函数，执行加法操作</span>    <span class="token keyword">int</span> resultAdd <span class="token operator">=</span> <span class="token function">operate</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> add<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Result of addition: "</span> <span class="token operator">&lt;&lt;</span> resultAdd <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用函数指针作为参数调用 operate 函数，执行减法操作</span>    <span class="token keyword">int</span> resultSubtract <span class="token operator">=</span> <span class="token function">operate</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> subtract<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Result of subtraction: "</span> <span class="token operator">&lt;&lt;</span> resultSubtract <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
