<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>随机抽样公式</title>
      <link href="/2024/05/01/gai-lu-lun-gong-shi-tui-dao/"/>
      <url>/2024/05/01/gai-lu-lun-gong-shi-tui-dao/</url>
      
        <content type="html"><![CDATA[<h1 id="概率论公式推导"><a href="#概率论公式推导" class="headerlink" title="概率论公式推导"></a>概率论公式推导</h1><p>$$<br>\frac{(n-1)S^2}{\sigma ^2} \sim\chi^2(n-1)<br>$$</p><p>$$<br>S^2 = \frac{\sum_{i = 1}^{n}(X-\overline{X})^2}{n-1}  =\frac{\sum_{i=1}^{n}X^2-n\overline{X}^2}{n-1}<br>$$</p><p>$$<br>\overline{X} = \frac{\sum_{i=1}^{n}X_i}{n}<br>$$</p><p>$$<br>S^2 =(1- \frac{1}{n})\sum_{i=1}^{b}X_i^2 - 2 \sum_{i=1}^{n}X_iX_j<br>$$</p><p>将$S^2$转换成行列式，求解特征值，对行列式加边，求得</p><p>$$<br>\lambda_1 = \lambda_2 = …=\lambda_{n-1} = 1<br>$$</p><p>$$<br>\lambda_n = 0<br>$$</p><p>故通过正交变换，原式可以转换成n-1个正态分布的累加，即为自由度为n-1的卡方分布</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高级语言程序设计大作业实验报告</title>
      <link href="/2024/04/24/gao-ji-yu-yan-cheng-xu-she-ji-da-zuo-ye-shi-yan-bao-gao/"/>
      <url>/2024/04/24/gao-ji-yu-yan-cheng-xu-she-ji-da-zuo-ye-shi-yan-bao-gao/</url>
      
        <content type="html"><![CDATA[<h1 id="高级语言程序设计大作业实验报告"><a href="#高级语言程序设计大作业实验报告" class="headerlink" title="高级语言程序设计大作业实验报告"></a>高级语言程序设计大作业实验报告</h1><h2 id="一-作业题目"><a href="#一-作业题目" class="headerlink" title="一. 作业题目"></a>一. 作业题目</h2><p>基于qt制作的平面2d小游戏 Genshin_Pursuit</p><h2 id="二-开发软件"><a href="#二-开发软件" class="headerlink" title="二. 开发软件"></a>二. 开发软件</h2><p>QT5.14.2 + vscode</p><h2 id="三-课题要求"><a href="#三-课题要求" class="headerlink" title="三. 课题要求"></a>三. 课题要求</h2><ol><li>面向对象</li><li>单元测试</li><li>模型部分</li><li>验证</li></ol><h2 id="四-主要流程"><a href="#四-主要流程" class="headerlink" title="四. 主要流程"></a>四. 主要流程</h2><h3 id="1-实现思路"><a href="#1-实现思路" class="headerlink" title="1. 实现思路"></a>1. 实现思路</h3><h4 id="a-构建基本场景"><a href="#a-构建基本场景" class="headerlink" title="a. 构建基本场景"></a>a. 构建基本场景</h4><p>首先构建场景之间的框架。游戏中，首先构建StartScene类，来负责游戏的开始界面；然后构建MainScene，负责游戏的主要内容，在MainScene中，构建四个按钮，通过信号和槽的机制，链接四个场景，分别为ChooseScene、MyEquipment、hotel、introduction，对应负责游戏关卡的选择、装备的购买，角色属性的更新，金币的消耗、进入酒店回复血量，消耗金币、游戏介绍；在CHooseScene类内部，设置三个按钮，同样通过信号和槽的机制来连接三个主要的游戏关卡</p><h4 id="b-构建游戏角色"><a href="#b-构建游戏角色" class="headerlink" title="b. 构建游戏角色"></a>b. 构建游戏角色</h4><p>实现MainCharacter类的人物构建，属性的存储，实现arrow类来储存记录角色的输出箭矢，实现了箭矢的移动逻辑和动画</p><h4 id="c-构建游戏怪兽"><a href="#c-构建游戏怪兽" class="headerlink" title="c. 构建游戏怪兽"></a>c. 构建游戏怪兽</h4><p>实现qqren、qqking、syfs三个类，实现各自的移动和怪物本身的技能特效，即丘丘王的冲刺，深渊法师的瞬移，深渊法师的减速</p><h4 id="d-游戏逻辑的实现"><a href="#d-游戏逻辑的实现" class="headerlink" title="d. 游戏逻辑的实现"></a>d. 游戏逻辑的实现</h4><p>在scene01、scene02、scene03之中，实现了角色的攻击逻辑，根据关卡的通过次数，改变怪兽的本身属性，类内实现了怪物的随着时间生成，怪物随着时间释放技能，被攻击后死亡的特点，实现了通过键盘事件类掌控角色的移动</p><h3 id="2-实现方法"><a href="#2-实现方法" class="headerlink" title="2. 实现方法"></a>2. 实现方法</h3><p>a. QT中的信号和槽的机制，在connect函数中使用lamada表达式，即匿名函数<br>b. 实现碰撞逻辑，包括角色射箭和怪兽的碰撞和角色本身和怪兽碰撞<br>c. 计时器的使用，在控制各种技能移动时都使用了移动的逻辑<br>d. 鼠标事件和键盘事件的重写</p><h2 id="五-测试"><a href="#五-测试" class="headerlink" title="五. 测试"></a>五. 测试</h2><p>在本游戏的每个发布阶段都寻找了内测玩家，多次测量相关关卡，包括三个游戏场景，旅馆和装备的逻辑，综合测试得到本游戏的内容稳定</p><h2 id="六-收获"><a href="#六-收获" class="headerlink" title="六. 收获"></a>六. 收获</h2><ol><li>对lamada表达式的掌握，能做到将lamada表达式用于后续cpp的算法题目</li><li>对继承和类之间的深入理解，如何能实现代码的精简化</li><li>熟练掌握了github的使用，加深了对开源的理解，通过重写实现了角色的移动和攻击</li></ol><h2 id="七-反思"><a href="#七-反思" class="headerlink" title="七. 反思"></a>七. 反思</h2><p>某些本可以使用类的继承语法的地方没有使用，而是之间复制粘贴，增加了不必要的代码量，影响后期版本迭代</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程大作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率论思考</title>
      <link href="/2024/04/19/gai-lu-lun-si-kao/"/>
      <url>/2024/04/19/gai-lu-lun-si-kao/</url>
      
        <content type="html"><![CDATA[<h1 id="概率论思考"><a href="#概率论思考" class="headerlink" title="概率论思考"></a>概率论思考</h1><ol><li>对于随机变量，其分布函数需要满足右连续性。特别的，对于连续随机变量，其分布函数需要满足连续性。</li><li>对连续随机变量，概率密度函数求分布函数时使用，x = 左边界时分布函数的值 = 0，可得到系数，使用连续性，可得到后续范围内的系数</li><li>对于均匀分布x，令y  = f( x ) 可以得到y的分布函数为f的反函数，用这种方式，可以生成一组满足符合正态分布的随机数</li><li>证明概率论不等式时常针对于积分范围放缩，证明极限问题时使用概率密度函数的收敛性。例子如下，为解决该问题，将1/y 放缩为1/x。同样原理，在证明chebyshev不等式时同样采取这种方式</li></ol><p>$$<br>\lim_{x \to \infty}<br>\int_{x}^{+\infty}  \frac{f(y)}{y}dy = 0<br>$$</p><ol start="5"><li>x可以表示X的一个具体的取值，在确定具体参数范围的时候，可以将x当成一个相对固定的量，从而确定其他变量的取值范围，在求类似于Z = X + Y问题时尤其常用，可以将X + Y &lt; z当成一个约束条件，用线性规划的基本理论，找到变量的范围，在图中画出变量的取值，求二重积分。由于z可以被当成定值，通过换元，可以将变量区域换成矩形区域，从而利用矩形区域的优良性质。当然，此类问题使用换元法，带入雅可比行列式，计算更为便捷，但仍应注意积分范围问题。</li><li>若有dx,dy，相当于将dx、dy内部的x和y变成定元</li><li>若有(X1,X2…Xn)和(Y1,Y2…Yn)相互独立，则h(X1,X2…Xn)和g(Y1,2…Y2n)相互独立，从微分的角度看，两者不相关，可以分离</li></ol><p>$$<br>\iint h(x_1,x_2\dots x_n)g(y_1,y_2\dots y_n)dx_1dx_2\dots dx_ndy_1dy_2\dots dy_n = \int h(x_1,x_2\dots x_n)dx_1dx_2\dots dx_n \int g(y_1,y_2\dots y_n)dy_1dy_2\dots dy_n<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三大公式</title>
      <link href="/2024/04/17/gao-si-gong-shi-ge-lin-gong-shi-si-tuo-ke-si-gong-shi/"/>
      <url>/2024/04/17/gao-si-gong-shi-ge-lin-gong-shi-si-tuo-ke-si-gong-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="高斯公式、格林公式、斯托克斯公式"><a href="#高斯公式、格林公式、斯托克斯公式" class="headerlink" title="高斯公式、格林公式、斯托克斯公式"></a>高斯公式、格林公式、斯托克斯公式</h1><p>$$<br>F = (P,Q,R)<br>$$</p><h2 id="1-nabla算子"><a href="#1-nabla算子" class="headerlink" title="1. nabla算子"></a>1. nabla算子</h2><p>$$<br>\nabla  = \frac{\partial }{\partial x} \mathbf{i} + \frac{\partial }{\partial y} \mathbf{j} + \frac{\partial }{\partial z} \mathbf{k}<br>$$</p><h2 id="2-梯度概念"><a href="#2-梯度概念" class="headerlink" title="2. 梯度概念"></a>2. 梯度概念</h2><p>将nabla算子作用于函数，得到梯度，梯度是函数下降最快的路径。梯度将数量场转化为向量场</p><p>$$<br>grad( f )= \nabla f = \frac{\partial f}{\partial x} \mathbf{i} + \frac{\partial f}{\partial y} \mathbf{j} + \frac{\partial f}{\partial z} \mathbf{k}<br>$$</p><h2 id="3-散度概念"><a href="#3-散度概念" class="headerlink" title="3. 散度概念"></a>3. 散度概念</h2><p>散度描述了一个点流入和流出物理量的程度</p><p>$$<br>\nabla \cdot \mathbf{F} = \frac{\partial F_x}{\partial x} + \frac{\partial F_y}{\partial y} + \frac{\partial F_z}{\partial z}<br>$$</p><h2 id="4-旋度"><a href="#4-旋度" class="headerlink" title="4. 旋度"></a>4. 旋度</h2><p>旋度描述了向量场旋转旋涡的强度和方向</p><p>$$<br>\nabla \times \mathbf{F} = \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial}{\partial x} &amp; \frac{\partial}{\partial y} &amp; \frac{\partial}{\partial z} \<br>Fx &amp; Fy &amp; Fz<br>\end{vmatrix}<br>$$</p><h2 id="5-环量"><a href="#5-环量" class="headerlink" title="5.环量"></a>5.环量</h2><p>$$<br>\Gamma = \oint_C \mathbf{F} \cdot d\mathbf{r} =\oint_C\ Pdx +Qdy +Rdz<br>$$</p><p>散度和旋度的物理描述可以类比于向量的点成和叉乘，点成描述两个向量共线的程度，而叉乘表述出两个向量垂直的程度</p><h2 id="6-高斯公式"><a href="#6-高斯公式" class="headerlink" title="6. 高斯公式"></a>6. 高斯公式</h2><p>理解为流过边界的通量 = 内部所有散度的贡献<br>可以把散度理解为通量的体密度，当选定某个圆球域，通过该域的有电场，当该原球域的r→0，得到某个点的散度</p><p>$$<br>\iint_S \mathbf{F} \cdot d\mathbf{S} = \iiint_V (\nabla \cdot \mathbf{F}) \,dV<br>$$</p><p>用电荷来理解，划定一个电场域，正电荷只会流出电通量，而负电荷只会吸收电通量，因此，这个场中每个电荷的散度累计为整个划定电场域边界的电通量</p><h2 id="7-斯托克斯公式"><a href="#7-斯托克斯公式" class="headerlink" title="7. 斯托克斯公式"></a>7. 斯托克斯公式</h2><p>理解为围绕边界的环量 = 曲面上旋度的的贡献   可以把旋度理解为环量的面密度</p><p>给定闭曲线环，将环量理解为场沿着这个闭曲线环的做功即是曲线积分</p><p>就三维而言，做功可以看成是三个二维的累加，将某个闭矩形域投射到三个维度，计算每个分量所做的功的累加</p><p>曲线环收缩到一个点，即为某点的旋度。而在二维中只考虑xoy平面，原公式退化为格林公式</p><p>$$<br>\oint_C \mathbf{F} \cdot d\mathbf{r} = \iint_S (\nabla \times \mathbf{F}) \cdot d\mathbf{S}<br>$$</p><p>$$<br>d\mathbf{S} = (dydz, dxdz,dxdy)<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找细节实现</title>
      <link href="/2024/04/17/er-fen-cha-zhao/"/>
      <url>/2024/04/17/er-fen-cha-zhao/</url>
      
        <content type="html"><![CDATA[<ol><li>首先引入数组颜色的概念，定义蓝色和红色为查找的边界条件，两种颜色对应属性相反。问题转化为寻找蓝色和红色的边界，根据题目写出函数isBlue</li><li>对于查找问题，先假定查找对象的数组为灰色数组，左指针指向数组的的-1个元素，将满足左条件的元素标记为蓝色；同时，右指针right指向N+1(N为数组元素个数)，满足右条件的数组标记为红色。找-1和N+1是为了设置一个初始的虚拟颜色，不存在颜色的正误判断，从而避免对0和N-1元的颜色讨论，也同时避免了left + 1 = right而直接退出循环的错误</li><li>所以只需要判断二分点对应的颜色，就可以得到红蓝的边界，在确定二分点之后，可以得出   从二分点颜色到颜色对应边界的区域均为该种颜色</li><li>为严格得到每一个区域的颜色，设置循环停止条件为 left+1 = right 之后，会有0到left为蓝色区域，right到N为红色区域</li><li>伪代码如下</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp">left <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>  right <span class="token operator">=</span> N <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">!=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>         <span class="token keyword">if</span> <span class="token function">isBlue</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span>                left <span class="token operator">=</span> mid        <span class="token keyword">else</span>                 righr <span class="token operator">=</span> mid        根据实际情况返回left <span class="token operator">or</span> right<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>时间复杂度为O(log n)</li><li>例子，LeetCode2529</li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程，算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
