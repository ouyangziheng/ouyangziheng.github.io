<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>高斯公式、格林公式、斯托克斯公式</title>
      <link href="/2024/04/17/gao-si-gong-shi-ge-lin-gong-shi-si-tuo-ke-si-gong-shi/"/>
      <url>/2024/04/17/gao-si-gong-shi-ge-lin-gong-shi-si-tuo-ke-si-gong-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="高斯公式、格林公式、斯托克斯公式"><a href="#高斯公式、格林公式、斯托克斯公式" class="headerlink" title="高斯公式、格林公式、斯托克斯公式"></a>高斯公式、格林公式、斯托克斯公式</h1><p>$$<br>F = (P,Q,R)<br>$$</p><ol><li>nabla算子</li></ol><p>$$<br>\nabla  = \frac{\partial }{\partial x} \mathbf{i} + \frac{\partial }{\partial y} \mathbf{j} + \frac{\partial }{\partial z} \mathbf{k}<br>$$</p><ol><li>梯度概念, 将nabla算子作用于函数，得到梯度，梯度是函数下降最快的路径。梯度将数量场转化为向量场</li></ol><p>$$<br>grad( f )= \nabla f = \frac{\partial f}{\partial x} \mathbf{i} + \frac{\partial f}{\partial y} \mathbf{j} + \frac{\partial f}{\partial z} \mathbf{k}<br>$$</p><ol><li>散度概念，散度描述了一个点流入和流出物理量的程度</li></ol><p>$$<br>\nabla \cdot \mathbf{F} = \frac{\partial F_x}{\partial x} + \frac{\partial F_y}{\partial y} + \frac{\partial F_z}{\partial z}</p><p>$$</p><ol><li>旋度，旋度描述了向量场旋转(旋涡)的强度和方向</li></ol><p>$$<br>\nabla \times \mathbf{F} = \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial}{\partial x} &amp; \frac{\partial}{\partial y} &amp; \frac{\partial}{\partial z} \<br>F_x &amp; F_y &amp; F_z<br>\end{vmatrix}<br>$$</p><ol><li>散度和旋度的物理描述可以类比于向量的点成和叉乘，点成描述两个向量共线的程度，而叉乘表述出两个向量垂直的程度</li><li>环量</li></ol><p>$$<br>\Gamma = \oint_C \mathbf{F} \cdot d\mathbf{r} =\oint_C\ Pdx +Qdy +Rdz<br>$$</p><ol><li><p>高斯公式—理解为流过边界的通量 = 内部所有散度的贡献   可以把散度理解为通量的体密度，当选定某个圆球域，通过该域的有电场，当该原球域的r→0，得到某个点的散度</p><p> $$<br> \oiint_S \mathbf{F} \cdot d\mathbf{S} = \iiint_V (\nabla \cdot \mathbf{F}) \,dV</p><p> $$</p><ol><li>用电荷来理解，划定一个电场域，正电荷只会流出电通量，而负电荷只会吸收电通量，因此，这个场中每个电荷的散度累计为整个划定电场域边界的电通量</li></ol></li><li><p>斯托克斯公式—理解为围绕边界的环量 = 曲面上旋度的的贡献   可以把旋度理解为环量的面密度</p><p> 给定闭曲线环，将环量理解为场沿着这个闭曲线环的做功(即是曲线积分)</p><p> 就三维而言，做功可以看成是三个二维的累加，将某个闭矩形域投射到三个维度，计算每个分量所做的功的累加</p><p> 当曲线环收缩到一个点，即为某点的旋度。而在二维中只考虑xoy平面，原公式退化为格林公式</p></li></ol><p>$$<br>\oint_C \mathbf{F} \cdot d\mathbf{r} = \iint_S (\nabla \times \mathbf{F}) \cdot d\mathbf{S}<br>$$</p><p>$$<br>d\mathbf{S} = (cosxdydz, cosydxdz,coszdxdy) = icosx+jcosy+kcosz<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学与物理公式关联 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找细节实现</title>
      <link href="/2024/04/17/er-fen-cha-zhao/"/>
      <url>/2024/04/17/er-fen-cha-zhao/</url>
      
        <content type="html"><![CDATA[<ol><li>首先引入数组颜色的概念，定义蓝色和红色为查找的边界条件，两种颜色对应属性相反。问题转化为寻找蓝色和红色的边界，根据题目写出函数isBlue</li><li>对于查找问题，先假定查找对象的数组为灰色数组，左指针指向数组的的-1个元素，将满足左条件的元素标记为蓝色；同时，右指针right指向N+1(N为数组元素个数)，满足右条件的数组标记为红色。找-1和N+1是为了设置一个初始的虚拟颜色，不存在颜色的正误判断，从而避免对0和N-1元的颜色讨论，也同时避免了left + 1 = right而直接退出循环的错误</li><li>所以只需要判断二分点对应的颜色，就可以得到红蓝的边界，在确定二分点之后，可以得出   从二分点颜色到颜色对应边界的区域均为该种颜色</li><li>为严格得到每一个区域的颜色，设置循环停止条件为 left+1 = right 之后，会有0到left为蓝色区域，right到N为红色区域</li><li>伪代码如下</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp">left <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>  right <span class="token operator">=</span> N <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">!=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>         <span class="token keyword">if</span> <span class="token function">isBlue</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span>                left <span class="token operator">=</span> mid        <span class="token keyword">else</span>                 righr <span class="token operator">=</span> mid        根据实际情况返回left <span class="token operator">or</span> right<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>时间复杂度为O(log n)</li><li>例子，LeetCode2529</li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程，算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
