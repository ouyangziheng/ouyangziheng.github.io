<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>二分查找细节实现</title>
      <link href="/2024/04/17/er-fen-cha-zhao/"/>
      <url>/2024/04/17/er-fen-cha-zhao/</url>
      
        <content type="html"><![CDATA[<ol><li>首先引入数组颜色的概念，定义蓝色和红色为查找的边界条件，两种颜色对应属性相反。问题转化为寻找蓝色和红色的边界，根据题目写出函数isBlue</li><li>对于查找问题，先假定查找对象的数组为灰色数组，左指针指向数组的的-1个元素，将满足左条件的元素标记为蓝色；同时，右指针right指向N+1(N为数组元素个数)，满足右条件的数组标记为红色。找-1和N+1是为了设置一个初始的虚拟颜色，不存在颜色的正误判断，从而避免对0和N-1元的颜色讨论，也同时避免了left + 1 = right而直接退出循环的错误</li><li>所以只需要判断二分点对应的颜色，就可以得到红蓝的边界，在确定二分点之后，可以得出   从二分点颜色到颜色对应边界的区域均为该种颜色</li><li>为严格得到每一个区域的颜色，设置循环停止条件为 left+1 = right 之后，会有0到left为蓝色区域，right到N为红色区域</li><li>伪代码如下</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp">left <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>  right <span class="token operator">=</span> N <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">!=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>         <span class="token keyword">if</span> <span class="token function">isBlue</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span>                left <span class="token operator">=</span> mid        <span class="token keyword">else</span>                 righr <span class="token operator">=</span> mid        根据实际情况返回left <span class="token operator">or</span> right<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>时间复杂度为O(log n)</li><li>例子，LeetCode2529</li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程，算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
